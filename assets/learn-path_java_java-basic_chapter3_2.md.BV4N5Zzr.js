import{_ as s,c as i,o as a,V as n}from"./chunks/framework.AW5yxxpt.js";const y=JSON.parse('{"title":"循环语句","description":"","frontmatter":{},"headers":[],"relativePath":"learn-path/java/java-basic/chapter3/2.md","filePath":"learn-path/java/java-basic/chapter3/2.md"}'),p={name:"learn-path/java/java-basic/chapter3/2.md"},l=n(`<h1 id="循环语句" tabindex="-1">循环语句 <a class="header-anchor" href="#循环语句" aria-label="Permalink to &quot;循环语句&quot;">​</a></h1><p>在写代码的过程中，通常会有很多需要重复做的事情，这种事情我们需要使用循环语句来解决，对于初学者来说，循环结构是一个砍，可能需要几天才能理解清楚，唯一的办法就是多练习</p><h3 id="for-循环" tabindex="-1">for 循环 <a class="header-anchor" href="#for-循环" aria-label="Permalink to &quot;for 循环&quot;">​</a></h3><p>先来看一个需求，打印出 1-5 这几个数字</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>上面输出数字的代码我们重复写了 5 次，现在只要求输出 5 个数字，如果输出 10000 万次呢？如果还是这样输出，那会非常的麻烦，这就需要使用循环语句来解决</p><p>请看下面的代码</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>我们使用了 for 循环语句来循环输出 5 个数字，这个时候，如果我们的需求改变，需要输出 100 次，我们只需要修改一下代码即可</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>以上就是使用循环语句的作用，接下来，我们详细拆解一下 for 循环语句</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// 语句的结构如下</span></span>
<span class="line"><span>for (初始化表达式; 条件表达式; 迭代语句) {</span></span>
<span class="line"><span>    循环体</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>循环语句需要包括几个要素</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>1.初始变量，这个变量用来控制条件是否成立</span></span>
<span class="line"><span>2.判断条件，根据这个条件来决定是否执行循环体</span></span>
<span class="line"><span>3.迭代，改变变量的值，再代入条件进行判断，以决定是否进行下次循环</span></span>
<span class="line"><span>4.循环体，需要被循环执行的代码片段</span></span></code></pre></div><p>以下面的代码为例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>详细的执行步骤：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>第一次循环</span></span>
<span class="line"><span></span></span>
<span class="line"><span>第1步，初始化条件变量  int i = 1； 这个初始化只执行1次</span></span>
<span class="line"><span>第2步，变量i的值代入条件，即 1 &lt;= 5, 结果为true</span></span>
<span class="line"><span>第3步，因为第2步结果为true，要执行一次循环体，即System.out.println(1); 输出1</span></span>
<span class="line"><span>第4步，执行迭代语句 i++； 执行过后i的值为2</span></span>
<span class="line"><span></span></span>
<span class="line"><span>第二次循环</span></span>
<span class="line"><span>上次循环后，i的值为2</span></span>
<span class="line"><span>第1步，把i=2代入条件判断，即 2 &lt;= 5;结果为true</span></span>
<span class="line"><span>第2步，条件语句结果为true，需要执行循环体，即System.out.println(2)；输出2</span></span>
<span class="line"><span>第3步，执行迭代语句 i++； 执行过后i的值为3</span></span>
<span class="line"><span></span></span>
<span class="line"><span>第三次循环</span></span>
<span class="line"><span>上次循环后，i的值为3</span></span>
<span class="line"><span>第1步，把i=3代入条件判断，即 3 &lt;= 5;结果为true</span></span>
<span class="line"><span>第2步，条件语句结果为true，需要执行循环体，即System.out.println(3)；输出3</span></span>
<span class="line"><span>第3步，执行迭代语句 i++； 执行过后i的值为4</span></span>
<span class="line"><span></span></span>
<span class="line"><span>第四次循环</span></span>
<span class="line"><span>上次循环后，i的值为4</span></span>
<span class="line"><span>第1步，把i=4代入条件判断，即 4 &lt;= 5;结果为true</span></span>
<span class="line"><span>第2步，条件语句结果为true，需要执行循环体，即System.out.println(4)；输出4</span></span>
<span class="line"><span>第3步，执行迭代语句 i++； 执行过后i的值为5</span></span>
<span class="line"><span></span></span>
<span class="line"><span>第五次循环</span></span>
<span class="line"><span>上次循环后，i的值为5</span></span>
<span class="line"><span>第1步，把i=5代入条件判断，即 5 &lt;= 5;结果为true</span></span>
<span class="line"><span>第2步，条件语句结果为true，需要执行循环体，即System.out.println(5)；输出5</span></span>
<span class="line"><span>第3步，执行迭代语句 i++； 执行过后i的值为6</span></span>
<span class="line"><span></span></span>
<span class="line"><span>第六次循环</span></span>
<span class="line"><span>上次循环后，i的值为6</span></span>
<span class="line"><span>第1步，把i=6代入条件判断，即 6 &lt;= 5;结果为false</span></span>
<span class="line"><span>第2步，条件语句结果为false，结束循环</span></span></code></pre></div><p>从上面的详细步骤，我们得出以下结论，需要注意：</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>循环需要有结束条件，如果没有结束条件，那么代码将永久循环下去，造成死循环，让计算机卡死</p><p>理解循环的小技巧，像我上面一样，把循环的详细执行步骤，手写 3-5 遍</p></div><h3 id="break-和-continue-关键字" tabindex="-1">break 和 continue 关键字 <a class="header-anchor" href="#break-和-continue-关键字" aria-label="Permalink to &quot;break 和 continue 关键字&quot;">​</a></h3><p>break 表示在循环中，可以跳出当前的循环</p><p>举个例子：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 执行这条语句会跳出当前循环</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>上面代码中，循环输出 5 个数字，但是循环体中做了一个判断，如果 i==2 的时候，就跳出循环，因此，最终只会输出 1</p><p>continue，表示继续，跳出当前循环，继续下一次循环，这意味着，如果 continue 语句后面还有内容，是不会被执行的</p><p>举个例子：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 执行这条语句后，就直接跳过，进行下次循环</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        continue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 后面这条不会被执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>上面代码中，当 i==2 的时候，执行了一条 continue 语句，继续下次循环，本次循环中，continue 后面的 System.out.println(i);这条语句没有被执行到，因此，不会输出，最终输出到结果是：1345</p><h3 id="循环嵌套" tabindex="-1">循环嵌套 <a class="header-anchor" href="#循环嵌套" aria-label="Permalink to &quot;循环嵌套&quot;">​</a></h3><p>在循环内部，可以嵌套循环</p><p>举个例子：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i; j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;i=&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;, j=&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>输出结果</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>i=1, j=1</span></span>
<span class="line"><span>i=2, j=1</span></span>
<span class="line"><span>i=2, j=2</span></span>
<span class="line"><span>i=3, j=1</span></span>
<span class="line"><span>i=3, j=2</span></span>
<span class="line"><span>i=3, j=3</span></span></code></pre></div><p>学习循环，一定要搞清楚到底执行了多少步，前期不太熟的时候，练习的方法是把步骤手写出来</p><p>例如：上面的代码中，循环的执行步骤如下</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>外层循环</span></span>
<span class="line"><span></span></span>
<span class="line"><span>当i=1的时候，满足条件，执行循环体</span></span>
<span class="line"><span>    for (int j = 1; j &lt;= 1; j++) {</span></span>
<span class="line"><span>        System.out.println(&quot;i=&quot; + 1 + &quot;, j=&quot; + j);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    上面是内层循环，内层循环的步骤如下：</span></span>
<span class="line"><span>        当j=1的时候，满足条件，执行一次打印，输出 i=1, j=1</span></span>
<span class="line"><span>        当j=2的时候，不满足条件，结束循环</span></span>
<span class="line"><span>        内层循环结束，跳出内层循环，执行外层循环</span></span>
<span class="line"><span>当i=2的时候，满足条件，执行循环体</span></span>
<span class="line"><span>    for (int j = 1; j &lt;= 2; j++) {</span></span>
<span class="line"><span>        System.out.println(&quot;i=&quot; + 1 + &quot;, j=&quot; + j);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    上面是内层循环，内层循环的步骤如下：</span></span>
<span class="line"><span>        当j=1的时候，满足条件，执行一次打印，输出 i=2, j=1</span></span>
<span class="line"><span>        当j=2的时候，满足条件，执行一次打印，输出 i=2，j=2</span></span>
<span class="line"><span>        当j=3的时候，不满足条件，结束循环</span></span>
<span class="line"><span>        内层循环结束，跳出内层循环，执行外层循环</span></span>
<span class="line"><span>当i=3的时候，满足条件，执行循环体</span></span>
<span class="line"><span>    for (int j = 1; j &lt;= 3; j++) {</span></span>
<span class="line"><span>        System.out.println(&quot;i=&quot; + 3 + &quot;, j=&quot; + j);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    这里的步骤，留给大家自己补充上去...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>当i=4的时候，不满足条件，结束循环</span></span></code></pre></div>`,38),t=[l];function h(k,e,E,r,d,c){return a(),i("div",null,t)}const o=s(p,[["render",h]]);export{y as __pageData,o as default};
