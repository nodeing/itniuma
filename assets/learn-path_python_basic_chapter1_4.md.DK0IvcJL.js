import{_ as t,c as e,o as a,V as d}from"./chunks/framework.AW5yxxpt.js";const y=JSON.parse('{"title":"运算符","description":"","frontmatter":{},"headers":[],"relativePath":"learn-path/python/basic/chapter1/4.md","filePath":"learn-path/python/basic/chapter1/4.md"}'),n={name:"learn-path/python/basic/chapter1/4.md"},r=d(`<h1 id="运算符" tabindex="-1">运算符 <a class="header-anchor" href="#运算符" aria-label="Permalink to &quot;运算符&quot;">​</a></h1><p>运算符本质上就是代表运算规则的符号，掌握运算符只需要掌握三点</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>1 运算符的分类</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2 运算符有哪些？这些符号代表什么规则</span></span>
<span class="line"><span></span></span>
<span class="line"><span>3 运算符的优先级</span></span></code></pre></div><p>先来看运算符的分类</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>算数运算符</span></span>
<span class="line"><span>赋值运算符</span></span>
<span class="line"><span>复合赋值运算符</span></span>
<span class="line"><span>比较运算符</span></span>
<span class="line"><span>逻辑运算符</span></span></code></pre></div><h2 id="算数运算符" tabindex="-1">算数运算符 <a class="header-anchor" href="#算数运算符" aria-label="Permalink to &quot;算数运算符&quot;">​</a></h2><table><thead><tr><th style="text-align:center;">运算符</th><th style="text-align:center;">描述</th><th>实例</th></tr></thead><tbody><tr><td style="text-align:center;">+</td><td style="text-align:center;">加</td><td>1 + 1 输出结果为 2</td></tr><tr><td style="text-align:center;">-</td><td style="text-align:center;">减</td><td>1-1 输出结果为 0</td></tr><tr><td style="text-align:center;">*</td><td style="text-align:center;">乘</td><td>2 * 2 输出结果为 4</td></tr><tr><td style="text-align:center;">/</td><td style="text-align:center;">除</td><td>10 / 2 输出结果为 5</td></tr><tr><td style="text-align:center;">//</td><td style="text-align:center;">整除</td><td>9 // 4 输出结果为 2</td></tr><tr><td style="text-align:center;">%</td><td style="text-align:center;">取余</td><td>9 % 4 输出结果为 1</td></tr><tr><td style="text-align:center;">**</td><td style="text-align:center;">指数</td><td>2 *_ 4 输出结果为 16，即 2 _ 2 _ 2 _ 2</td></tr><tr><td style="text-align:center;">()</td><td style="text-align:center;">小括号</td><td>小括号用来提高运算优先级，即 (1 + 2) * 3 输出结果为 9</td></tr></tbody></table><blockquote><p>注意：</p></blockquote><ul><li>混合运算优先级顺序：<code>()</code>高于 <code>**</code> 高于 <code>*</code> <code>/</code> <code>//</code> <code>%</code> 高于 <code>+</code> <code>-</code></li></ul><h2 id="赋值运算符" tabindex="-1">赋值运算符 <a class="header-anchor" href="#赋值运算符" aria-label="Permalink to &quot;赋值运算符&quot;">​</a></h2><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>=</td><td>赋值</td><td>将<code>=</code>右侧的结果赋值给等号左侧的变量</td></tr><tr><td>+=</td><td>加法赋值运算符</td><td>c += a 等价于 c = c + a</td></tr><tr><td>-=</td><td>减法赋值运算符</td><td>c -= a 等价于 c = c- a</td></tr><tr><td>*=</td><td>乘法赋值运算符</td><td>c _= a 等价于 c = c _ a</td></tr><tr><td>/=</td><td>除法赋值运算符</td><td>c /= a 等价于 c = c / a</td></tr><tr><td>//=</td><td>整除赋值运算符</td><td>c //= a 等价于 c = c // a</td></tr><tr><td>%=</td><td>取余赋值运算符</td><td>c %= a 等价于 c = c % a</td></tr><tr><td>**=</td><td>幂赋值运算符</td><td>c ** = a 等价于 c = c ** a</td></tr></tbody></table><h2 id="比较运算符" tabindex="-1">比较运算符 <a class="header-anchor" href="#比较运算符" aria-label="Permalink to &quot;比较运算符&quot;">​</a></h2><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>==</td><td>判断相等。如果两个操作数的结果相等，则条件结果为真(True)，否则条件结果为假(False)</td><td>如 a=3,b=3，则（a == b) 为 True</td></tr><tr><td>!=</td><td>不等于 。如果两个操作数的结果不相等，则条件为真(True)，否则条件结果为假(False)</td><td>如 a=3,b=3，则（a == b) 为 True 如 a=1,b=3，则(a != b) 为 True</td></tr><tr><td>&gt;</td><td>运算符左侧操作数结果是否大于右侧操作数结果，如果大于，则条件为真，否则为假</td><td>如 a=7,b=3，则(a &gt; b) 为 True</td></tr><tr><td>&lt;</td><td>运算符左侧操作数结果是否小于右侧操作数结果，如果小于，则条件为真，否则为假</td><td>如 a=7,b=3，则(a &lt; b) 为 False</td></tr><tr><td>&gt;=</td><td>运算符左侧操作数结果是否大于等于右侧操作数结果，如果大于，则条件为真，否则为假</td><td>如 a=7,b=3，则(a &lt; b) 为 False 如 a=3,b=3，则(a &gt;= b) 为 True</td></tr><tr><td>&lt;=</td><td>运算符左侧操作数结果是否小于等于右侧操作数结果，如果小于，则条件为真，否则为假</td><td>如 a=3,b=3，则(a &lt;= b) 为 True</td></tr></tbody></table><h2 id="逻辑运算符" tabindex="-1">逻辑运算符 <a class="header-anchor" href="#逻辑运算符" aria-label="Permalink to &quot;逻辑运算符&quot;">​</a></h2><table><thead><tr><th>运算符</th><th>逻辑表达式</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>and</td><td>x and y</td><td>布尔&quot;与&quot;：如果 x 为 False，x and y 返回 False，否则它返回 y 的值。</td><td>True and False， 返回 False。</td></tr><tr><td>or</td><td>x or y</td><td>布尔&quot;或&quot;：如果 x 是 True，它返回 True，否则它返回 y 的值。</td><td>False or True， 返回 True。</td></tr><tr><td>not</td><td>not x</td><td>布尔&quot;非&quot;：如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td><td>not True 返回 False, not False 返回 True</td></tr></tbody></table>`,15),s=[r];function l(c,o,h,i,p,b){return a(),e("div",null,s)}const g=t(n,[["render",l]]);export{y as __pageData,g as default};
