import{_ as a,c as s,o as n,V as e}from"./chunks/framework.AW5yxxpt.js";const b=JSON.parse('{"title":"一个好的学习方案","description":"","frontmatter":{},"headers":[],"relativePath":"article/guide/chapter2/2.3.md","filePath":"article/guide/chapter2/2.3.md"}'),p={name:"article/guide/chapter2/2.3.md"},t=e(`<h1 id="一个好的学习方案" tabindex="-1">一个好的学习方案 <a class="header-anchor" href="#一个好的学习方案" aria-label="Permalink to &quot;一个好的学习方案&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>抖音号：bokecity_com，微信号(客服，不提供技术答疑)：nodeing-cn</p></div><h3 id="高效的前提" tabindex="-1">高效的前提 <a class="header-anchor" href="#高效的前提" aria-label="Permalink to &quot;高效的前提&quot;">​</a></h3><p>非常多的人自学都以失败告终或者学习效率非常低下，最本质的问题还是没有去思考过如何才能高效的学习，特别是一些喜欢白嫖的人，想要转行了，于是乎上 B 站找视频教程就开始学，完全没有制定合理的学习计划，也没有思考过投入成本，只知道自己要转行，免费课程又没什么门槛，就先学者呗，今天学这个机构的，遇到听不懂的课程，可能又去搜别的机构的课程，循环往复，重复入门，最后不得不花几万去报班，自学编程要想高效掌握，有两个条件是不可少的</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>1 系统的课程</span></span>
<span class="line"><span>2 及时的答疑</span></span></code></pre></div><p>学习编程一定要有一个系统的学习路线，知识点是有前后依赖关系的，如果没有明确的学习路线，会浪费大量的时间，举个例子：你学一套课程 100 个课时，当你学到第 80 个课时的时候，实在听不下去了，感觉很难，有些知识点可能都没听过，这个时候你发现，原来学这套课程，应该需要先学另外一套课程，于是乎停下当前的课程去学别的，等你花几天时间学完，重新回去学原来没有学完的课程，突然发现，前面的 80 个课时掌握得不是太牢靠，又得重新来过，这就浪费了大量的时间，所以说，一个系统的学习路线是非常重要的</p><p>对于零基础的人来说，还有一个比较重要的问题，那就是答疑一定要跟上，虽然你可以免费从 B 站上获取到非常多的免费课程，但是课程是死的，程序跑起来是活的，你跟着视频敲代码，在自己电脑上可能会出现各种各样的错误，这些 bug 如果不能及时解决，会让初学者越学越没有成就感，越学越没有信心，这是很多自学的人失败的根本原因，所以，如果学习编程的时候，想要效率更高，成功概率更高，你需要保证的就是前面我们提到的两点：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>1 系统的课程</span></span>
<span class="line"><span>2 及时的答疑</span></span></code></pre></div><h3 id="上课的形式" tabindex="-1">上课的形式 <a class="header-anchor" href="#上课的形式" aria-label="Permalink to &quot;上课的形式&quot;">​</a></h3><p>获取知识点的形式多种多样，主要有以下几种</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>1.自己看书学习（电子书、纸质书）</span></span>
<span class="line"><span>2.找录播视频学习</span></span>
<span class="line"><span>3.报线上直播班</span></span>
<span class="line"><span>4.线下面授</span></span></code></pre></div><p>这几种形式从本质上可以分为 2 种：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>1 主动学习知识</span></span>
<span class="line"><span>2 被动接收知识</span></span></code></pre></div><p>从学习效率上来讲，主动学习和被动接收在不同的学习阶段，各自的效率是不一样的，我们把学习的周期大致分为以下几个阶段</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>1.零基础小白阶段</span></span>
<span class="line"><span>2.半独立解决问题阶段</span></span>
<span class="line"><span>3.完全独立完成项目阶段</span></span></code></pre></div><p>这三个阶段的学习和训练是有差别的，在第一个阶段，属于零基础小白，甚至都不知道编程语言是干啥的，这个阶段的重点是打基础，在这个阶段的状态就是知道了企业中需要用到的各种技术栈，学会使用框架，例如：如果是学前端的话，那么从掌握 html、css、js 这三门基础语言，再到掌握 Vue 框架，这个阶段在我们看来都是打基础的阶段，这个阶段的学生是不能完全独立做项目的，甚至独立解决问题的能力都很欠缺，看各种教程能看懂，自己独立写不知道从哪方面下手，如果你有这种状态，那说明你还没有脱离基础阶段，在这个阶段由于基础薄弱，高效的方式就是看视频学习、直播课、线下面授</p><p>第二个阶段，半独立解决问题阶段，这个阶段的重点是提升解决问题的能力，由于第一个阶段持续的时间比较长，而且都是通过视频学习或者直播、面授等方式学习，这些方式的本质是让你被动的接收知识，说白了就是老师讲，你在下面听，老师敲代码，你跟着敲，这种状态持续时间长了会对视频教程产生依赖，不具备独立思考和解决问题的能力，线下培训班提供保姆式服务，培训出来的学生大多数都是停留在第一阶段，少部分到了第二阶段，这少部分人最终成功转行的，都是在工作中慢慢锻炼出来的解决问题的能力，在这个阶段学习的方法应该是 跟着视频敲 1 遍代码，先把 demo 的功能做出来，然后不看视频再自己做 1-3 遍，项目不在多，而在于你练习得熟不熟悉</p><p>第三个阶段，独立解决问题，做项目阶段，这个阶段就是你工作的常态，给你需求，你在没有教程的情况下，可以独立的完成这些需求，如果能达到这种程度，那找工作问题不大了</p><h3 id="系统的课程" tabindex="-1">系统的课程 <a class="header-anchor" href="#系统的课程" aria-label="Permalink to &quot;系统的课程&quot;">​</a></h3><p>系统的课程可以避免你重复入门，节约大量的时间，这个好处在前面我们也讲过，更重要的是，知识点前后衔接比较流畅，如果你还是处于上面我们讲的三个阶段中的基础阶段，我们是不建议学习多个机构的课程的，在你掌握了一定的基础以后，有了一点解决问题的能力，你再去找其他机构的课程会比较好，记住，初学者就是一张白纸，在白纸上去画画更容易一些，如果你各个机构都去学一点，可能就把自己搞成四不像了，学多了，学杂了，也学废了，具体系统的视频课程，我们这边有付费，也有免费，可以到我们下一章，产品篇查看详细介绍</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>一个好的学习方案</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>1.零基础小白阶段：打基础，以视频教程为主</span></span>
<span class="line"><span>2.半独立解决问题阶段：以项目练习为主，看一遍视频做一遍项目，然后不看视频独立做1-2遍</span></span>
<span class="line"><span>3.全独立完成项目阶段：拿到需求文档，独立实现项目，不看视频</span></span>
<span class="line"><span></span></span>
<span class="line"><span>以上这些阶段都需要有人及时的帮你答疑，保证你学习足够顺畅</span></span></code></pre></div>`,23),i=[t];function l(c,o,d,h,r,u){return n(),s("div",null,i)}const v=a(p,[["render",l]]);export{b as __pageData,v as default};
